#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language russian
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\listings_params "language=Haskell"
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section*
Введение
\end_layout

\begin_layout Standard
В курсовой работе решается задача объединения парсинга данных и перевода
 их в текстовый вид.
 Задача решается в рамках языка Haskell - чистого функционального языка
 общего назначения с алгебраическими типами данных.
 Алгебраические типы данных представляют из себя типы, значениями которых
 являются значения некоторых иных типов, 
\begin_inset Quotes eld
\end_inset

обернутых
\begin_inset Quotes erd
\end_inset

 конструкторами алгебраического типа.
\end_layout

\begin_layout Standard
Примеры: вектор в двумерном пространстве, список:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

data Vector = Vector { x :: Float, y :: Float }
\end_layout

\begin_layout Plain Layout

data List a = Nil | Cons a (List a)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Типы могут принадлежать классам типов, определяющими над ними определенные
 функции.
 Вывод типа в строку осуществляется с помощью функции show из класса Show.
 Считывание из строки осуществляется с помощью функции read из класса Read.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

show :: Show a => a -> String
\end_layout

\begin_layout Plain Layout

read :: Read a => String -> a
\end_layout

\end_inset


\end_layout

\begin_layout Standard
В Haskell существует механизм производных экземпляров (deriving), когда
 тип можно сделать экземпляром стандартных классов, в том числе Read и Show.
 В этом случае текстовое представление соответствует тому, которых используется
 в самом Haskell.
 Обычно это неприемлемо, и приходится самому писать отдельно парсер и принтер
 для нужного представления, так как в данных момент не существует готового
 к практическоу использованию средства, позволяющего решить эти задачи одновреме
нно.
 В итоге нарушается принцип DRY, код становится более трудно поддерживать.
\end_layout

\begin_layout Standard
В данный момент существует две работы: 
\begin_inset CommandInset citation
LatexCommand cite
key "inveritible"

\end_inset

 и 
\begin_inset CommandInset citation
LatexCommand cite
key "replaying"

\end_inset

, в которых схожая задача решается с помощью введения функций, работающих
 в обоих направлениях, и описания парсера и принтера на их основе, что больше
 похоже на разбиение проблемы на подпроблемы, вместо её решения.
\end_layout

\begin_layout Section
Реализация с помодью введения класса типов
\end_layout

\begin_layout Standard
Изначально планировалось решить задачу с помощью введения нового типа, описывающ
его грамматику языка, представляющего тип, и тайпкласса ReadShow c функциями
 toGrammar и readGrammar, переводящими пользователский тип в тип грамматики
 и обратно.
 Пользователь должен бы был делать свой тип экземпляром ReadShow и он бы
 автоматически делался экземпляром классов Read и Show.
 В упрощенном виде это могло выглядеть так:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

module ReadShow where
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

data RSGrammar = Concat [RSGrammar]
\end_layout

\begin_layout Plain Layout

--             | Kleene RSGrammar
\end_layout

\begin_layout Plain Layout

               | Lit String
\end_layout

\begin_layout Plain Layout

--             deriving Show
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

showGrammar :: RSGrammar -> String
\end_layout

\begin_layout Plain Layout

showGrammar (Lit s) = s
\end_layout

\begin_layout Plain Layout

showGrammar (Concat []) = ""
\end_layout

\begin_layout Plain Layout

showGrammar (Concat (x:xs)) = (showGrammar x ++ showGrammar (Concat xs))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class ReadShow a where
\end_layout

\begin_layout Plain Layout

    toGrammar :: a -> RSGrammar
\end_layout

\begin_layout Plain Layout

--  fromGrammar :: RSGrammar -> a
\end_layout

\begin_layout Plain Layout

  
\end_layout

\begin_layout Plain Layout

instance (ReadShow rs) => (Show rs) where
\end_layout

\begin_layout Plain Layout

  show rs = showGrammar (toGrammar rs)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

data Abc = A | B | C | Pair Abc Abc
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

instance ReadShow Abc where
\end_layout

\begin_layout Plain Layout

  toGrammar A = Lit "A"
\end_layout

\begin_layout Plain Layout

  toGrammar B = Lit "B"
\end_layout

\begin_layout Plain Layout

  toGrammar C = Lit "C"
\end_layout

\begin_layout Plain Layout

  toGrammar (Pair one two) = Concat [Lit "(", toGrammar one, Lit ", ",
\end_layout

\begin_layout Plain Layout

                                     toGrammar two, Lit ")"]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Возникла проблема, что на чистом Haskell 98 экземпляром класса должен являться
 конкретный тип, одного контекста недостаточно.
 Кроме того, при таком решении все-таки надо описывать две функции: переводящую
 тип в грамматику и обратно.
 Возможно, получилось бы как-то вывести вторую функцию из первой или просто
 использовать её при парсинге, но опять же, на чистом Haskell это, скорее
 всего, не получилось бы сделать.
\end_layout

\begin_layout Standard
Стоит отметить, что после включения GHC расширений FlexibleInstances и Undecidab
leInstances для тайпклассов вышеприведенный код начинал работать, однако
 ломался Show у типов, которые инстанциировались от него непосредственно,
 например, у стандартных типов.
\end_layout

\begin_layout Section
Решение с помощью Template Haskell
\end_layout

\begin_layout Standard
Для решения обозначенных проблем решено было использовать Template Haskell.
\end_layout

\begin_layout Standard
Template Haskell — это расширение языка Haskell, предназначенное для метапрограм
мирования.
 Оно даёт возможность алгоритмического построения программы на стадии компиляции.
 Это позволяет разработчику использовать различные техники программирования,
 не доступные в самом Haskell, такие как, макро-подобные расширения, обобщённое
 программирование, генерация вспомогательных структур данных и функций из
 имеющихся.
\end_layout

\begin_layout Standard
Для нас полезной возможностью Template Haskell оказалась возможность генерироват
ь instance объявления нужных типов.
\end_layout

\begin_layout Standard
По ходу работы обнаружилось, что описывать алгебраические типы с помощью
 грамматик излишне, так как они сами отчасти ими являются: примитивные типы
 можно рассматривать как терминалы, а конструкторы типов - как правила вывода
 из нетерминалов.
 Парсеры и принтеры для примитивных типов нам уже предоставлены Haskell,
 осталось сделать их для конструкторов.
 Конструктор имеет вид ИмяКонструктора Поле1 Поле2 ...
 .
 Очевидное описание его текстового представления - это строка, где как-то
 обозначены места, где должны находиться текстовые представления его полей.
 В работе был выбран формат, где эти места обозначаются символом '@'.
 Так как тип - это набор конструторов, он описывается списком описаний конструкт
оров.
 В итоге описание типов выглядит следующим образом:
\end_layout

\begin_layout Standard
Описание вектора как двух числел в скобках, разделенных запятой:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

data Vector = Vector Float Float
\end_layout

\begin_layout Plain Layout

deriveReadShow ''Dot ["(@, @)"]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Описание бинарного дерева из 
\begin_inset CommandInset citation
LatexCommand cite
key "gentle"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

data Tree a = Leaf a | Branch (Tree a) (Tree a)
\end_layout

\begin_layout Plain Layout

deriveReadShow ''Tree ["@", "<@|@>"]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Реализация принтера и парсера большей частью выполнена на Template Haskell.
 Строки фортатирования перед работой переводятся во внутреннее представление.
 Стрящийся принтер работает довольно очевидным образом на основе паттерн-матчинг
а.
 Парсер работает на основе list comprehensions, идея взята из 
\begin_inset CommandInset citation
LatexCommand cite
key "gentle"

\end_inset

.
 Была проделана работа по поддержке различных способов объявления типов
 и конструкторов: поддерживаются типы с одним или несколькими параметрами,
 конструкторы с метками полей.
 Практически, поддреживаются все виды конструкторов, о которых рассказывается
 в большинстве литературы по Haskell.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "inveritible"

\end_inset

T.
 Rendel and K.
 Ostermann.
 Invertible syntax descriptions: unifying parsing and pretty printing.
 In J.
 Gibbons, editor, 
\shape italic
Haskell
\shape default
, pages 1–12.
 ACM, 2010.
 ISBN 978-1-4503-0252-4.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "replaying"

\end_inset

М.
 Boespflug.
 Functional Pearl: Replaying the stack for parsing and pretty printing.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "gentle"

\end_inset

P.
 Hudak, J.
 Peterson, J.
 H.
 Fasel.
 A Gentle Introduction to Haskell 98.
 October, 1999.
\end_layout

\end_body
\end_document
